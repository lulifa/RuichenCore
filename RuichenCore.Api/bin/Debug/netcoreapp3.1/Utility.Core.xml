<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utility.Core</name>
    </assembly>
    <members>
        <member name="T:Utility.Core.CryptoHelper">
            <summary>
            提供加解密的帮助方法。
            </summary>
        </member>
        <member name="M:Utility.Core.CryptoHelper.EncryptDes(System.String)">
            <summary>
            Des算法加密字符串。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.EncryptDes(System.Byte[])">
            <summary>
            Des算法加密字节数组。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.DecryptDes(System.String)">
            <summary>
            Des算法解密字符串。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.DecryptDes(System.Byte[])">
            <summary>
            Des算法解密字节数组。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.EncryptAes(System.String)">
            <summary>
            Aes算法加密字符串。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.EncryptAes(System.Byte[])">
            <summary>
            Aes算法加密字节数组。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.DecryptAes(System.String)">
            <summary>
            Aes算法解密字符串。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.DecryptAes(System.Byte[])">
            <summary>
            Aes算法解密字节数组。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.ComputeMD5(System.String)">
            <summary>
            采用UTF8对文本进行编码，然后计算MD5。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.ComputeMD5(System.String,System.Text.Encoding)">
            <summary>
            采用指定的编码格式对文本进行编码，然后计算MD5。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.ComputeSHA1(System.String)">
            <summary>
            采用UTF8对文本进行编码，然后计算SHA1。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.ComputeSHA1(System.String,System.Text.Encoding)">
            <summary>
            采用指定的编码格式对文本进行编码，然后计算SHA1。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.ComputeSHA256(System.String)">
            <summary>
            采用UTF8对文本进行编码，然后计算SHA256。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.ComputeSHA256(System.String,System.Text.Encoding)">
            <summary>
            采用指定的编码格式对文本进行编码，然后计算SHA256。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.ComputeSHA384(System.String)">
            <summary>
            采用UTF8对文本进行编码，然后计算SHA384。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.ComputeSHA384(System.String,System.Text.Encoding)">
            <summary>
            采用指定的编码格式对文本进行编码，然后计算SHA1。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.ComputeSHA512(System.String)">
            <summary>
            采用UTF8对文本进行编码，然后计算SHA512。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.ComputeSHA512(System.String,System.Text.Encoding)">
            <summary>
            采用指定的编码格式对文本进行编码，然后计算SHA1。
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Utility.Core.CryptoHelper.ComputeHash(System.String,System.Text.Encoding,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            采用指定的编码格式和哈希算法计算哈希值。
            </summary>
        </member>
        <member name="M:Utility.Core.CryptoHelper.BytesToHexString(System.Byte[])">
            <summary>
            将字节数组转化为16进制字符串。
            </summary>
        </member>
        <member name="M:Utility.Core.CryptoHelper.HexStringToBytes(System.String)">
            <summary>
            将16进制字符串转化为字节数组。
            </summary>
        </member>
        <member name="T:Utility.Core.EntityStorage`2">
            <summary>
            实体仓储。可用于将尚未正式创建完成的实体临时保存起来，等正式创建后再插入到数据库。该类线程安全。
            </summary>
        </member>
        <member name="M:Utility.Core.EntityStorage`2.#ctor(System.Func{`0,`1})">
            <summary>
            构造方法。
            </summary>
            <param name="keyFunc">指定Entity的主键。</param>
        </member>
        <member name="M:Utility.Core.EntityStorage`2.Add(`0)">
            <summary>
            添加实体。
            </summary>
        </member>
        <member name="M:Utility.Core.EntityStorage`2.Remove(`0)">
            <summary>
            移除实体。
            </summary>
        </member>
        <member name="M:Utility.Core.EntityStorage`2.Find(`1)">
            <summary>
            找回实体。若不存在，返回null。
            </summary>
        </member>
        <member name="M:Utility.Core.EntityStorage`2.FindAll">
            <summary>
            找回所有实体。
            </summary>
        </member>
        <member name="M:Utility.Core.EntityStorage`2.Clear">
            <summary>
            清空实体。
            </summary>
        </member>
        <member name="T:Utility.Core.ExclusiveLock`1">
            <summary>
            互斥锁。可用于避免多个用户同时锁定同一个对象。该类线程安全。
            </summary>
        </member>
        <member name="P:Utility.Core.ExclusiveLock`1.Timeout">
            <summary>
            获取或设置超时时间。默认为30分钟。
            </summary>
        </member>
        <member name="M:Utility.Core.ExclusiveLock`1.GetLocker(`0)">
            <summary>
            获取指定对象上当前的锁定人员。如果当前没有人员锁定，返回null。
            </summary>
        </member>
        <member name="M:Utility.Core.ExclusiveLock`1.TryLock(`0,System.String)">
            <summary>
            尝试锁定指定对象。如果锁定成功，返回true，锁定失败，返回false。
            </summary>
        </member>
        <member name="M:Utility.Core.ExclusiveLock`1.TryLock(`0,System.String,System.String@)">
            <summary>
            尝试锁定指定对象。如果锁定成功，返回true，锁定失败，返回false。
            <para>输出参数lockerId，无论锁定是否成功，都将返回当前的锁定人员。</para>
            </summary>
        </member>
        <member name="M:Utility.Core.ExclusiveLock`1.Unlock(`0,System.String)">
            <summary>
            解锁指定用户对指定对象的锁定。如果该对象当前没有锁定，或并不是被指定用户锁定，则不处理。
            </summary>
        </member>
        <member name="M:Utility.Core.ExclusiveLock`1.Unlock(`0)">
            <summary>
            解锁对指定对象的锁定。如果该对象当前没有锁定，则不处理。
            </summary>
        </member>
        <member name="M:Utility.Core.ExclusiveLock`1.Clear">
            <summary>
            清空所有的锁定。
            </summary>
        </member>
        <member name="T:Utility.Core.PrincipalConverter">
            <summary>
            Principal转化器。
            </summary>
        </member>
        <member name="M:Utility.Core.PrincipalConverter.Convert(System.String)">
            <summary>
            根据IdentityName，将其转化为IPrincipal。
            </summary>
        </member>
        <member name="M:Utility.Core.PrincipalConverter.Convert(System.String,System.String)">
            <summary>
            根据IdentityName、AuthenticationType，将其转化为IPrincipal。
            </summary>
        </member>
        <member name="M:Utility.Core.PrincipalConverter.Convert(System.String,System.String,System.String[])">
            <summary>
            根据IdentityName、AuthenticationType、Roles，将其转化为IPrincipal。
            </summary>
        </member>
        <member name="T:Utility.Core.RegexPatterns">
            <summary>
            常用正则表达式。
            </summary>
        </member>
        <member name="F:Utility.Core.RegexPatterns.Alpha">
            <summary>
            字母(a-zA-Z)。
            </summary>
        </member>
        <member name="F:Utility.Core.RegexPatterns.AlphaUpperCase">
            <summary>
            大写字母(A-Z)。
            </summary>
        </member>
        <member name="F:Utility.Core.RegexPatterns.AlphaLowerCase">
            <summary>
            小写字母(a-z)。
            </summary>
        </member>
        <member name="F:Utility.Core.RegexPatterns.AlphaNumeric">
            <summary>
            字母(a-zA-Z)、数字(0-9)。
            </summary>
        </member>
        <member name="F:Utility.Core.RegexPatterns.AlphaNumericSpace">
            <summary>
            字母(a-zA-Z)、数字(0-9)、空格( )。
            </summary>
        </member>
        <member name="F:Utility.Core.RegexPatterns.Numeric">
            <summary>
            Numeric。
            </summary>
        </member>
        <member name="F:Utility.Core.RegexPatterns.Integer">
            <summary>
            Integer。
            </summary>
        </member>
        <member name="F:Utility.Core.RegexPatterns.Mail">
            <summary>
            Mail。
            </summary>
        </member>
        <member name="F:Utility.Core.RegexPatterns.IPv4">
            <summary>
            IPv4。
            </summary>
        </member>
        <member name="F:Utility.Core.RegexPatterns.Url">
            <summary>
            Url。
            </summary>
        </member>
    </members>
</doc>
